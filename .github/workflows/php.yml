name: CarbonPHP Feature Test Suit

on: [push]

jobs:
  Linux:
    name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}
    runs-on: ${{matrix.operating-system}}
    container: ${{matrix.container}}
    strategy:
      max-parallel: 4
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: ['7.4']

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, intl
        ini-values: post_max_size=256M, short_open_tag=On
        coverage: xdebug
        tools: php-cs-fixer, phpunit
      env:
        update: true # specify true or false

    - name: Shutdown Ubuntu MySQL (SUDO)
      run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it

    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        # --character-set-server - The character set of MySQL server
        character set server: 'utf8mb4'
        # --collation-server - The character collation of MySQL server
        collation server: 'utf8mb4_general_ci'
        # Version of MySQL to use
        mysql version: 'latest'
        # MYSQL_ROOT_PASSWORD - root superuser password
        mysql root password: 'password'
        # MYSQL_DATABASE - name for the default database that is created
        mysql database: 'CarbonPHP'
        # MYSQL_USER - create the specified user with superuser power for created database
        mysql user: 'admin'
        # MYSQL_PASSWORD - specified superuser password which user is power for created database
        mysql password: 'password'

    - name: Validate composer.json and composer.lock
      run: composer validate

    # composer with Cache
    - name: Get composer cache directory
      id: composercache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache composer dependencies # https://github.com/marketplace/actions/setup-php-action#matrix-setup
      uses: actions/cache@v2
      with:
        path: ${{ steps.composercache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    # node with Cache
    - name: Get node.js cache directory
      id: nodecache
      run: echo "::set-output name=dir::$(npm config get cache)" # Use $(yarn cache dir) for yarn

    - name: Cache node.js dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.nodecache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Use '**/yarn.lock' for yarn
        restore-keys: ${{ runner.os }}-node-

    - name: Install node.js dependencies
      run: npm install

    # Generate Files
    - name: C6 Composer Setup Scripts
      run: composer setup

    # Double check php version
    - name: PHP version
      run: php --version

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md
    - name: Run test suite
      run: composer run-script test
