{"version":3,"sources":["../../../../node_modules/refractor/lang/kotlin.js"],"names":["kotlin","Prism","languages","extend","keyword","pattern","lookbehind","function","number","operator","insertBefore","raw-string","alias","annotation","label","interpolation","inside","delimiter","rest","module","exports","displayName","aliases"],"mappings":"2FAMA,SAAAA,EAAAC,IAGA,SAAAA,GACAA,EAAAC,UAAAF,OAAAC,EAAAC,UAAAC,OAAA,SACAC,QAAA,CAEAC,QAAA,2bACAC,YAAA,GAEAC,SAAA,iBACAF,QAAA,mBACAC,YAAA,IAEAE,OAAA,kIACAC,SAAA,gHAEAR,EAAAC,UAAAF,OAAA,cACAC,EAAAC,UAAAQ,aAAA,mBACAC,aAAA,CACAN,QAAA,sBACAO,MAAA,YAIAX,EAAAC,UAAAQ,aAAA,oBACAG,WAAA,CACAR,QAAA,sCACAO,MAAA,aAGAX,EAAAC,UAAAQ,aAAA,qBACAI,MAAA,CACAT,QAAA,YACAO,MAAA,YAGA,IAAAG,EAAA,EACAV,QAAA,cACAW,OAAA,CACAC,UAAA,CACAZ,QAAA,YACAO,MAAA,YAEAM,KAAAjB,EAAAC,UAAAF,SAEK,CACLK,QAAA,QACAO,MAAA,aAEAX,EAAAC,UAAAF,OAAA,OAAAgB,OAAAf,EAAAC,UAAAF,OAAA,cAAAgB,OAAA,CACAD,iBAhDA,CAkDGd,GAzDHkB,EAAAC,QAAApB,EACAA,EAAAqB,YAAA,SACArB,EAAAsB,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_kotlin.35183acf.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = kotlin;\nkotlin.displayName = 'kotlin';\nkotlin.aliases = [];\n\nfunction kotlin(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\n      keyword: {\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n        pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n        lookbehind: true\n      },\n      function: [/\\w+(?=\\s*\\()/, {\n        pattern: /(\\.)\\w+(?=\\s*\\{)/,\n        lookbehind: true\n      }],\n      number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n      operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    });\n    delete Prism.languages.kotlin['class-name'];\n    Prism.languages.insertBefore('kotlin', 'string', {\n      'raw-string': {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        alias: 'string' // See interpolation below\n\n      }\n    });\n    Prism.languages.insertBefore('kotlin', 'keyword', {\n      annotation: {\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n        alias: 'builtin'\n      }\n    });\n    Prism.languages.insertBefore('kotlin', 'function', {\n      label: {\n        pattern: /\\w+@|@\\w+/,\n        alias: 'symbol'\n      }\n    });\n    var interpolation = [{\n      pattern: /\\$\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^\\$\\{|\\}$/,\n          alias: 'variable'\n        },\n        rest: Prism.languages.kotlin\n      }\n    }, {\n      pattern: /\\$\\w+/,\n      alias: 'variable'\n    }];\n    Prism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {\n      interpolation: interpolation\n    };\n  })(Prism);\n}"],"sourceRoot":""}