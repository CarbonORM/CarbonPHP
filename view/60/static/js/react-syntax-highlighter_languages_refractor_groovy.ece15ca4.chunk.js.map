{"version":3,"sources":["../../../../node_modules/refractor/lang/groovy.js"],"names":["groovy","Prism","languages","extend","keyword","string","pattern","greedy","number","operator","lookbehind","punctuation","insertBefore","shebang","alias","spock-block","annotation","hooks","add","env","language","type","delimiter","content","value","replace","highlight","expression","inside","classes","push","module","exports","displayName","aliases"],"mappings":"2FAMA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,OAAAC,EAAAC,UAAAC,OAAA,SACAC,QAAA,6WACAC,OAAA,EACAC,QAAA,sDACAC,QAAA,GACK,CACLD,QAAA,qCACAC,QAAA,IAEAC,OAAA,+FACAC,SAAA,CACAH,QAAA,uJACAI,YAAA,GAEAC,YAAA,sBAEAV,EAAAC,UAAAU,aAAA,mBACAC,QAAA,CACAP,QAAA,OACAQ,MAAA,aAGAb,EAAAC,UAAAU,aAAA,wBACAG,cAAA,0DAEAd,EAAAC,UAAAU,aAAA,qBACAI,WAAA,CACAF,MAAA,cACAR,QAAA,eACAI,YAAA,KAIAT,EAAAgB,MAAAC,IAAA,gBAAAC,GACA,cAAAA,EAAAC,UAAA,WAAAD,EAAAE,KAAA,CACA,IAAAC,EAAAH,EAAAI,QAAAC,MAAA,GAEA,QAAAF,EAAA,CACA,IAAAhB,EAAA,kCAEA,MAAAgB,IACAhB,EAAA,mCAIAa,EAAAI,QAAAC,MAAAL,EAAAI,QAAAC,MAAAC,QAAA,QAA2D,KAAAA,QAAA,SAAuB,KAClFN,EAAAI,QAAAtB,EAAAyB,UAAAP,EAAAI,QAAAC,MAAA,CACAG,WAAA,CACArB,UACAI,YAAA,EACAkB,OAAA3B,EAAAC,UAAAF,UAGAmB,EAAAU,QAAAC,KAAA,MAAAR,EAAA,uBA1DAS,EAAAC,QAAAhC,EACAA,EAAAiC,YAAA,SACAjC,EAAAkC,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_groovy.ece15ca4.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = groovy;\ngroovy.displayName = 'groovy';\ngroovy.aliases = [];\n\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    keyword: /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    string: [{\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,\n      greedy: true\n    }, {\n      pattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    }],\n    number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  });\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n  });\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    }\n  }); // Handle string interpolation\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0];\n\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n        } // To prevent double HTML-encoding we have to decode env.content first\n\n\n        env.content.value = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        });\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n      }\n    }\n  });\n}"],"sourceRoot":""}