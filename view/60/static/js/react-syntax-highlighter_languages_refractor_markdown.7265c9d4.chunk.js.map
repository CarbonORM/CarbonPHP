{"version":3,"sources":["../../../../node_modules/refractor/lang/markdown.js"],"names":["markdown","Prism","inner","source","createInline","pattern","starAlternative","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","blockquote","alias","table","inside","table-data-rows","lookbehind","table-data","punctuation","table-line","table-header-row","table-header","code","greedy","code-block","code-language","title","hr","list","url-reference","variable","string","bold","content","italic","strike","url","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","trim","split","toLowerCase","push","classes","cls","match","exec","grammar","value","highlight","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","module","exports","displayName","aliases"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_markdown.7265c9d4.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = markdown;\nmarkdown.displayName = 'markdown';\nmarkdown.aliases = ['md'];\n\nfunction markdown(Prism) {\n  ;\n\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source;\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\n     * @returns {RegExp}\n     */\n\n    function createInline(pattern, starAlternative) {\n      pattern = pattern.replace(/<inner>/g, inner);\n\n      if (starAlternative) {\n        pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*');\n      }\n\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n\n    var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(/__/g, tableCell);\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // `code`\n        // ``code``\n        pattern: /``.+?``|`[^`\\r\\n]+`/,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }],\n      title: [{\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#+.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source, true),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source, true),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /~~?/\n        }\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          variable: {\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          content: {\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;\n      ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n\n\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n            var alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase(); // add alias\n\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n\n      var codeLang = '';\n\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n\n      var grammar = Prism.languages[codeLang];\n\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        // reverse Prism.util.encode\n        var code = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n        env.content = Prism.highlight(code, grammar, codeLang);\n      }\n    });\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n}"],"sourceRoot":""}