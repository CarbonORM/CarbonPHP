{"version":3,"sources":["../../../../node_modules/refractor/lang/haml.js"],"names":["haml","Prism","languages","multiline-comment","pattern","lookbehind","alias","multiline-code","inside","rest","ruby","filter","filter-name","markup","doctype","tag","attributes","attr-value","attr-name","punctuation","code","interpolation","delimiter","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","module","exports","displayName","aliases"],"mappings":"2FAMA,SAAAA,EAAAC,IASA,SAAAA,GACAA,EAAAC,UAAAF,KAAA,CAEAG,oBAAA,CACAC,QAAA,iEACAC,YAAA,EACAC,MAAA,WAEAC,iBAAA,EACAH,QAAA,+GACAC,YAAA,EACAG,OAAA,CACAC,KAAAR,EAAAC,UAAAQ,OAEO,CACPN,QAAA,uFACAC,YAAA,EACAG,OAAA,CACAC,KAAAR,EAAAC,UAAAQ,QAIAC,OAAA,CACAP,QAAA,kFACAC,YAAA,EACAG,OAAA,CACAI,cAAA,CACAR,QAAA,WACAE,MAAA,cAIAO,OAAA,CACAT,QAAA,4BACAC,YAAA,EACAG,OAAA,CACAC,KAAAR,EAAAC,UAAAW,SAGAC,QAAA,CACAV,QAAA,oCACAC,YAAA,GAEAU,IAAA,CAEAX,QAAA,qGACAC,YAAA,EACAG,OAAA,CACAQ,WAAA,EAGAZ,QAAA,kCACAC,YAAA,EACAG,OAAA,CACAC,KAAAR,EAAAC,UAAAQ,OAEW,CACXN,QAAA,YACAI,OAAA,CACAS,aAAA,CACAb,QAAA,0CACAC,YAAA,GAEAa,YAAA,4BACAC,YAAA,WAEW,CACXf,QAAA,aACAI,OAAA,CACAC,KAAAR,EAAAC,UAAAQ,QAGAS,YAAA,SAGAC,KAAA,CACAhB,QAAA,0CACAC,YAAA,EACAG,OAAA,CACAC,KAAAR,EAAAC,UAAAQ,OAIAW,cAAA,CACAjB,QAAA,aACAI,OAAA,CACAc,UAAA,CACAlB,QAAA,WACAE,MAAA,eAEAG,KAAAR,EAAAC,UAAAQ,OAGAS,YAAA,CACAf,QAAA,kCACAC,YAAA,IAWA,IARA,IAEAkB,EAAA,QACAZ,OAAA,SACAa,SAAA,gBACK,8DACLC,EAAA,GAEAC,EAAA,EAAAC,EAAAJ,EAAAK,OAAuCF,EAAAC,EAAOD,IAAA,CAC9C,IAAAf,EAAAY,EAAAG,GACAf,EAAA,kBAAAA,EAAA,CACAA,SACAa,SAAAb,GACOA,EAEPV,EAAAC,UAAAS,EAAAa,YACAC,EAAA,UAAAd,UAAA,CACAP,QAAAyB,OAjBA,wGAiBAC,QAAA,kBAAiEnB,WACjEN,YAAA,EACAG,OAAA,CACAI,cAAA,CACAR,QAAA,WACAE,MAAA,YAEAG,KAAAR,EAAAC,UAAAS,EAAAa,aAMAvB,EAAAC,UAAA6B,aAAA,gBAAAN,GAhIA,CAiIGxB,GA9IH+B,EAAAC,QAAAjC,EACAA,EAAAkC,YAAA,OACAlC,EAAAmC,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_haml.98a1bc4b.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = haml;\nhaml.displayName = 'haml';\nhaml.aliases = [];\n\nfunction haml(Prism) {\n  /* TODO\n  Handle multiline code after tag\n  %foo= some |\n  multiline |\n  code |\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [{\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }, {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            // Lookbehind tries to prevent interpolations from breaking it all\n            // Allows for one nested group of braces\n            pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n            lookbehind: true,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                lookbehind: true\n              },\n              'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[=(),]/\n            }\n          }, {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    };\n    var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n\n    var filters = ['css', {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter)),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('haml', 'filter', all_filters);\n  })(Prism);\n}"],"sourceRoot":""}