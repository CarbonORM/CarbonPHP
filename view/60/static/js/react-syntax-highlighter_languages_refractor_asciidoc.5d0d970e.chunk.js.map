{"version":3,"sources":["../../../../node_modules/refractor/lang/asciidoc.js"],"names":["asciidoc","Prism","attributes","pattern","lookbehind","inside","quoted","punctuation","interpreted","string","variable","operator","attr-value","languages","comment-block","alias","table","specifiers","passthrough-block","literal-block","other-block","list-punctuation","list-label","indented-block","comment","title","attribute-entry","hr","page-break","admonition","callout","macro","function","inline","url","attribute-ref","italic","bold","replacement","entity","line-continuation","copyFromAsciiDoc","keys","o","i","l","split","length","rest","hooks","add","env","type","content","value","replace","adoc","module","exports","displayName","aliases"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_asciidoc.5d0d970e.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = asciidoc;\nasciidoc.displayName = 'asciidoc';\nasciidoc.aliases = ['adoc'];\n\nfunction asciidoc(Prism) {\n  ;\n\n  (function (Prism) {\n    var attributes = {\n      pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,\n      lookbehind: true,\n      inside: {\n        quoted: {\n          pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          inside: {\n            punctuation: /^[$`]|[$`]$/\n          }\n        },\n        interpreted: {\n          pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n          inside: {\n            punctuation: /^'|'$/ // See rest below\n\n          }\n        },\n        string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        variable: /\\w+(?==)/,\n        punctuation: /^\\[|\\]$|,/,\n        operator: /=/,\n        // The negative look-ahead prevents blank matches\n        'attr-value': /(?!^\\s+$).+/\n      }\n    };\n    var asciidoc = Prism.languages.asciidoc = {\n      'comment-block': {\n        pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n        alias: 'comment'\n      },\n      table: {\n        pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n        inside: {\n          specifiers: {\n            pattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,\n            alias: 'attr-value'\n          },\n          punctuation: {\n            pattern: /(^|[^\\\\])[|!]=*/,\n            lookbehind: true\n          } // See rest below\n\n        }\n      },\n      'passthrough-block': {\n        pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^\\++|\\++$/ // See rest below\n\n        }\n      },\n      // Literal blocks and listing blocks\n      'literal-block': {\n        pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n\n        }\n      },\n      // Sidebar blocks, quote blocks, example blocks and open blocks\n      'other-block': {\n        pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n\n        }\n      },\n      // list-punctuation and list-label must appear before indented-block\n      'list-punctuation': {\n        pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list-label': {\n        pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'indented-block': {\n        pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n        lookbehind: true\n      },\n      comment: /^\\/\\/.*/m,\n      title: {\n        pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,\n        alias: 'important',\n        inside: {\n          punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n\n        }\n      },\n      'attribute-entry': {\n        pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n        alias: 'tag'\n      },\n      attributes: attributes,\n      hr: {\n        pattern: /^'{3,}$/m,\n        alias: 'punctuation'\n      },\n      'page-break': {\n        pattern: /^<{3,}$/m,\n        alias: 'punctuation'\n      },\n      admonition: {\n        pattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,\n        alias: 'keyword'\n      },\n      callout: [{\n        pattern: /(^[ \\t]*)<?\\d*>/m,\n        lookbehind: true,\n        alias: 'symbol'\n      }, {\n        pattern: /<\\d+>/,\n        alias: 'symbol'\n      }],\n      macro: {\n        pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n        inside: {\n          function: /^[a-z\\d-]+(?=:)/,\n          punctuation: /^::?/,\n          attributes: {\n            pattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: attributes.inside\n          }\n        }\n      },\n      inline: {\n        /*\n        The initial look-behind prevents the highlighting of escaped quoted text.\n        Quoted text can be multi-line but cannot span an empty line.\n        All quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\n        First, we handle the constrained quotes.\n        Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\n        They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\n        Then we handle the unconstrained quotes.\n        Those do not have the restrictions of the constrained quotes.\n        They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n        */\n        pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n        lookbehind: true,\n        inside: {\n          attributes: attributes,\n          url: {\n            pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n            inside: {\n              punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n            }\n          },\n          'attribute-ref': {\n            pattern: /^\\{.+\\}$/,\n            inside: {\n              variable: {\n                pattern: /(^\\{)[a-z\\d,+_-]+/,\n                lookbehind: true\n              },\n              operator: /^[=?!#%@$]|!(?=[:}])/,\n              punctuation: /^\\{|\\}$|::?/\n            }\n          },\n          italic: {\n            pattern: /^(['_])[\\s\\S]+\\1$/,\n            inside: {\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n            }\n          },\n          bold: {\n            pattern: /^\\*[\\s\\S]+\\*$/,\n            inside: {\n              punctuation: /^\\*\\*?|\\*\\*?$/\n            }\n          },\n          punctuation: /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n        }\n      },\n      replacement: {\n        pattern: /\\((?:C|TM|R)\\)/,\n        alias: 'builtin'\n      },\n      entity: /&#?[\\da-z]{1,8};/i,\n      'line-continuation': {\n        pattern: /(^| )\\+$/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    }; // Allow some nesting. There is no recursion though, so cloning should not be needed.\n\n    function copyFromAsciiDoc(keys) {\n      keys = keys.split(' ');\n      var o = {};\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        o[keys[i]] = asciidoc[keys[i]];\n      }\n\n      return o;\n    }\n\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');\n    asciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');\n    asciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity'); // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n      }\n    });\n    Prism.languages.adoc = Prism.languages.asciidoc;\n  })(Prism);\n}"],"sourceRoot":""}