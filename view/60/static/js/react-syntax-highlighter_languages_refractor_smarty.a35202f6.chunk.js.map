{"version":3,"sources":["../../../../node_modules/refractor/lang/smarty.js","../../../../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","__webpack_require__","smarty","Prism","register","languages","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","attr-name","inside","operator","punctuation","keyword","hooks","add","env","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_smarty.a35202f6.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = smarty;\nsmarty.displayName = 'smarty';\nsmarty.aliases = [];\n\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\n  Add support for variables inside double quoted strings\n  Add support for {php}\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n        pattern: /(\\.|->)(?!\\d)\\w+/,\n        lookbehind: true\n      }, {\n        pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n        lookbehind: true\n      }],\n      function: [{\n        pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n        lookbehind: true\n      }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    }; // Tokenize all inline Smarty expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n      var smartyLitteralStart = '{literal}';\n      var smartyLitteralEnd = '{/literal}';\n      var smartyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n        // Smarty tags inside {literal} block are ignored\n        if (match === smartyLitteralEnd) {\n          smartyLitteralMode = false;\n        }\n\n        if (!smartyLitteralMode) {\n          if (match === smartyLitteralStart) {\n            smartyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                  walkTokens(token.content);\n                }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}