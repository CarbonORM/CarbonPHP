<?php

namespace Table;

use CarbonPHP\Database;
use CarbonPHP\Entities;
use CarbonPHP\Error\PublicAlert;
use CarbonPHP\Interfaces\iRest;


class {{TableName}} extends Entities implements iRest
{
    const COLUMNS = [
           {{#explode}}
            '{{name}}',
        {{/explode}}
    ];

    const PRIMARY = "{{primary}}";

    public static function Get(array &$return, $primary = null, array $argv) // : bool
    {
        if (isset($argv['limit'])){
            $pos = strrpos($argv['limit'], "><");
if ($pos !== false) { // note: three equal signs
substr_replace($argv['limit'],',',$pos, 2);
}
$limit = ' LIMIT ' . $argv['limit'];
} else {
$limit = '';
}

$get = array_intersect(array_keys($argv), self::COLUMNS);

$where = array_intersect($get, array_merge_recursive(array_fill_keys($get, ''), $argv));

$get =  !empty($get) ? implode(", ", $get) : ' * ';

$sql = 'SELECT ' .  $get . ' FROM {{database}}.{{TableName}}';

if ($primary === null) {
$sql .= ' WHERE ';
foreach ($where as $column => $value) {
$sql .= "('$column' = '$value') AND ";
}
$sql = substr($sql, 0, strlen($sql)-4);
} else if (!empty(self::PRIMARY)){
$sql .= ' WHERE ' . self::PRIMARY . "= '$primary'";
}

$sql .= $limit;

$return = self::fetch($sql);

return true;
}

public static function Post(array $argv)
{
$sql = 'INSERT INTO {{database}}.{{TableName}} ({{listed}}) VALUES ({{implode}})';
$stmt = self::database()->prepare($sql);
{{#explode}}
    $stmt->bindValue(':{{name}}', isset($argv['{{name}}']) ? $argv['{{name}}'] : null, \{{type}});
{{/explode}}
return $stmt->execute();
}

public static function Put(array &$return, $id, array $argv) //: bool
{
$put = array_intersect(array_keys($argv), self::COLUMNS);

$sql = 'UPDATE {{database}}.{{TableName}} ';

$sql .= ' SET ';        // my editor yells at me if I don't separate this from the above stmt

{{#explode}}
    if (isset($argv['{{name}}'])) {
    $sql .= '`{{name}}` = `:{{name}}`,';
    }

{{/explode}}

$sql .= ' WHERE `' . self::PRIMARY . "`  = $id";

$stmt = self::database()->prepare($sql);

{{#explode}}
    if (isset($argv['{{name}}'])) {
    $stmt->bindValue(':{{name}}', isset($argv['{{name}}']) ? $argv['{{name}}'] : null, \{{type}});
    }

{{/explode}}


if (!$stmt->execute()){
return false;
}

$return = array_merge_recursive($return, $argv);

return true;

}

/**
* @param array $array
* @param array $argv
* @return bool
*/
public static function Delete(array &$return, $primary = null, array $argv) //: bool
{
$get = array_intersect(array_keys($argv), self::COLUMNS);

$where = array_intersect($get, array_merge_recursive(array_fill_keys($get, ''), $argv));

$sql = 'DELETE * FROM {{database}}.{{TableName}} ';

$sql .= ' WHERE ';  // my editor yells at me if I don't separate this from the above stmt

foreach ($where as $column => $value) {
$sql .= "$column = $value";
}

return self::execute($sql);
}

}