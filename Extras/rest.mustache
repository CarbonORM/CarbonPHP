<?php

namespace Table;

use CarbonPHP\Database;
use CarbonPHP\Entities;
use CarbonPHP\Error\PublicAlert;
use CarbonPHP\Interfaces\iRest;

class {{name}} extends Entities implements iRest
{
    const COLUMNS = [
           {{#explode}}
            '{{name}}',
        {{/explode}}
    ];

    const PRIMARY = "{{primary}}";

    public static function Get(array &$return, string $primary = null, array $argv) : bool
    {
        if (isset($argv['pageSize'])){
            $pageSize = $argv['pageSize'];
            $pageSize = isset($argv['pageNumber']) ? $argv['pageNumber'] : 1;
        }

        $get = array_intersect(array_keys($argv), self::COLUMNS);

        $where = array_intersect($get, array_merge_recursive(array_fill_keys($get, ''), $argv));

        $sql = 'SELECT ' . implode(", ", $get) . ' FROM {{name}}';

        if ($primary !== null) {
            $sql .= ' WHERE ';
            foreach ($where as $column => $value) {
                $sql .= "(`$column` = `$value`) AND ";
            }
            $sql = substr($sql, 0, strlen($sql)-4);
        } else if (!empty(PRIMARY)){
            $sql .= ' WHERE `' . PRIMARY . "` = `$primary`";
        }
        $return = self::fetch($sql);

        return true;
    }

    public static function Post(array $argv)
    {
        $sql = 'INSERT INTO {{name}} ({{listed}}) VALUES ({{implode}})';
        $stmt = self::database()->prepare($sql);
        {{#explode}}
            $stmt->bindValue(':{{name}}', isset($argv['{{name}}']) ? $argv['{{name}}'] : null, {{type}});
        {{/explode}}
        return $stmt->execute();
    }

    public static function Put(array &$return, string $id, array $argv) : bool
    {
        $argv = array_merge($return, $argv);
        $sql = 'UPDATE api_key_configs SET `id` = `:id`,`api_key_id` = `:api_key_id`,`key` = `:key`,`value` = `:value`,`active_date` = `:active_date`,`inactive_date` = `:inactive_date`'
            . ' WHERE `' . PRIMARY . "`  = $id";
        $stmt = self::database()->prepare($sql);
        {{#explode}}
            $stmt->bindValue(':{{name}}', isset($argv['{{name}}']) ? $argv['{{name}}'] : null, {{type}});
        {{/explode}}
        return $stmt->execute();
    }

    /**
    * @param array $array
    * @param array $argv
    * @return bool
    */
    public static function Delete(array &$return, string $primary = null, array $argv) : bool
    {
        $get = array_intersect(array_keys($argv), self::COLUMNS);

        $where = array_intersect($get, array_merge_recursive(array_fill_keys($get, ''), $argv));

        $sql = 'DELETE * FROM {{name}} WHERE ';

        foreach ($where as $column => $value) {
            $sql .= "$column = $value";
        }s
        return self::execute($sql);
    }

}