<?php /** @noinspection ForgottenDebugOutputInspection */

namespace CarbonPHP\Traits;


use CarbonPHP\Classes\Types\ProgramArgumentsArray;


trait RestArguments
{

    use ProgramArguments;

    private static string $schema = 'CarbonPHP';
    private static string $user = 'root';
    private static string $password = 'password';
    private static bool $dumpData = false;
    private static false $queryWithDatabaseName = false;
    private static string $excludeTablesRegex = '';
    /**
     * @var string[]
     */
    private static array $excludeTheseTables = [];
    private static string $targetNamespace = 'Tables\\';
    private static string $prefix = '';
    private static bool $cleanUp = true;
    private static bool $verbose = false;
    private static bool $autoTarget = false;
    private static bool $primaryRequired = false;
    private static bool $carbonNamespace = false;
    private static string $targetDirectory = 'tables/';
    private static mixed $onlyTables = '';


    /**
     * @return ProgramArgumentsArray[]
     */
    public static function arguments(): array
    {
        return [
            '-h' => new ProgramArgumentsArray(
                flags: ['--help',],
                description: 'This dialogue',
                callable: static fn() => (new static)->usage(),
            ),
            '-d' => new ProgramArgumentsArray(
                flags: ['--dumpData',],
                description: 'Will create mysqldump_data.sql to project root, everything except table definitions which are generated by default and stored in the /mysqldump.sql file.',
                callable: static fn() => self::$dumpData = true,
            ),
            '-etr' => new ProgramArgumentsArray(
                flags: ['--excludeTablesRegex',],
                description: 'Pass a valid php regex with delimiters. If a table name matches the regular expression the table will be skipped and thus not generated. 
                                                ex. --excludeTablesRegex \'#_migration_.*#i\'',
                callable: static fn(array $argv, int &$i) => self::$excludeTablesRegex = $argv[++$i],
            ),
            '-ef' => new ProgramArgumentsArray(
                flags: ['--excludeFile',],
                description: 'Pass a file with a comma seperated list of tables to exclude.',
                callable: static function (array $argv, int &$i) {
                    if (empty($file = file_get_contents($argv[++$i]))) {
                        print 'Could not open file [ ' . $argv[$i] . " ] for input\n\n";
                        exit(1);
                    }
                    self::$excludeTheseTables = explode(PHP_EOL, $file);
                    unset($file);
                },
            ),
            '-dqwd' => new ProgramArgumentsArray(
                flags: ['--dontQueryWithDatabaseName',],
                description: 'This will remove the explicit resolution of the database name in queries. This if useful when your environments use different database names with the same structure. Avoid using this option if possible.',
                callable: static fn() => self::$queryWithDatabaseName = false,
            ),
            '-p' => new ProgramArgumentsArray(
                flags: ['--prefix',],
                description: 'Prefix to remove from class names. Defaults to none "".',
                callable: static fn(array $argv, int &$i) => self::$prefix = $argv[++$i],
            ),
            '-n' => new ProgramArgumentsArray(
                flags: ['--namespace',],
                description: 'The target namespace to assign each table to. Defaults to `Tables\\`',
                callable: static fn(array $argv, int &$i) => self::$targetNamespace = $argv[++$i],
            ),
            '-pr' => new ProgramArgumentsArray(
                flags: ['--primaryRequired',],
                description: 'The target namespace to assign each table to. Defaults to `Tables\\`',
                callable: static fn(array $argv, int &$i) => self::$primaryRequired = $argv[++$i],
            ),
            '-v' => new ProgramArgumentsArray(
                flags: ['--verbose',],
                description: 'The target namespace to assign each table to. Defaults to `Tables\\`',
                callable: static fn() => self::$verbose = true,
            ),
            '-cn' => new ProgramArgumentsArray(
                flags: ['--carbonNamespace',],
                description: 'The target namespace to assign each table to. Defaults to `Tables\\`',
                callable: static fn() => self::$carbonNamespace = true,
            ),
            '-a' => new ProgramArgumentsArray(
                flags: ['--autoTarget',],
                description: "Use composer.json's ['autoload']['psr-4']['Tables\\\\'] value under CarbonPHP::\$app_root",
                callable: static fn() => self::$autoTarget = true,
            ),
            '-td' => new ProgramArgumentsArray(
                flags: ['--targetDirectory',],
                description: "The target directory to store the rest generated api. Defaults to 'tables/'",
                callable: static fn(array $argv, int &$i) => self::$targetDirectory = $argv[++$i],
            ),
            '-f' => new ProgramArgumentsArray(
                flags: ['--onlyTables',],
                description: "File of tables names separated by eol",
                callable: static fn(array $argv, int &$i) => self::$onlyTables = file_get_contents($argv[++$i]),
            ),
            '-l' => new ProgramArgumentsArray(
                flags: ['--onlyTablesList',],
                description: "Pass a comma separated list of tables to generate. ex. --onlyTablesList 'table1,table2,table3'",
                callable: static fn(array $argv, int &$i) => self::$onlyTables = explode(',', $argv[++$i]),
            ),
        ];
    }


}

