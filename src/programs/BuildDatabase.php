<?php
/**
 * Created by IntelliJ IDEA.
 * User: richardmiles
 * Date: 2/3/19
 * Time: 11:36 PM
 */

namespace CarbonPHP\Programs;


use CarbonPHP\CarbonPHP;
use CarbonPHP\Database as DB;
use CarbonPHP\Interfaces\iColorCode;
use CarbonPHP\Interfaces\iCommand;

class BuildDatabase implements iCommand
{
    use ColorCode, MySQL {
        cleanUp as removeFiles;
    }


    public function cleanUp(): void
    {
        $this->removeFiles();
    }

    public function usage(): void
    {
        print <<<usage

        The setup program can be used to initialize and update a projects configuration files. 
        Currently it does not do this, but here is what it does do.  
        
        -s --save
        -r --rebuild                 Update the projects database configurations.
        -m --mysql_native_password      Change mysql to default to a native password.

usage;
        exit(1);
    }

    public function run($argv): void
    {
        $argc = count($argv);

        if ($argc === 0) {
            $this->usage();
        }

        $tableDirectory = '';

        /** @noinspection ForeachInvariantsInspection */
        for ($i = 0; $i < $argc; $i++) {
            switch ($argv[$i]) {
                default:
                    print 'Invalid argument ' . $argv[$i] . PHP_EOL;
                    $this->usage();
                    exit(1);
                case '-targetDirectory':
                    $tableDirectory = $argv[$i++];
                    break;
                case '-r':
                case '--rebuild':
                    self::colorCode('Starting Database Build');
                    DB::setUp(false, true);   // Redirect = false
                    self::colorCode('Finished Database Build');
                    // this is going to the CLI so no need to run/attach redirect scripts
                    exit(0);
                case '-m':
                case '--mysql_native_password':
                    self::colorCode('Adjusting Mysql For PHP Compatibility');
                    self::mysql_native_password();
                    self::colorCode('Done with mysql password compatibility');
                    exit(0);
                case '-s':
                case'--save':
                    self::colorCode('Saving current schema');
                    break;
            }
        }

        self::colorCode('This feature is DEPRECATED and will be removed in future versions of C6', iColorCode::RED);

        $dump = file_get_contents(self::MySQLDump());

        if (!preg_match_all('#DROP TABLE IF EXISTS `(.+)`;([^-])+#', $dump, $matches)) {
            print 'No tables matched in MySQL Dump. It does not look like CarbonPHP is setup correctly. Run `>> php index.php setup` to fix this.' . PHP_EOL;
            exit(1);
        }


        $build = <<<TEXT
<?php
/**  This file is autogenerated, do not edit. Changes will be lost.
 * 
 * This script will safely build or rebuild you database
 * tables. You should never execute this script manually as
 * CarbonPHP will automatically rebuild itself if needed.
 *
 * regenerate this page with
 *
 *     php index.php buildBuildDatabase
 *
 */

print '<h1>Setting up CarbonPHP</h1>';

\$db = \CarbonPHP\Database::database();

try {
    print '<html><head><title>Setup or Rebuild Database</title></head><body><h1>STARTING MAJOR CARBON SYSTEMS</h1>' . PHP_EOL;

    \$head = <<<HEAD
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
HEAD;

    \$foot = <<<FOOT
/*!40101 SET character_set_client = @saved_cs_client */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
FOOT;

TEXT;

        foreach ($matches[1] as $key => $tableName) {
            $build .= <<<TEXT
try {
        \$db->prepare('SELECT 1 FROM $tableName LIMIT 1;')->execute();
        print '<br>Table `$tableName` already exists</p>';
    } catch (PDOException \$e) {
        print '<br><p style="color: red">Creating `$tableName`</p>';
        \$sql = <<<END
        \$head
    {$matches[0][$key]}
        \$foot
END;

        print \$sql . '<br>';
        \$db->exec(\$sql) === false and die(print_r(\$db->errorInfo(), true));
        print '<br><p style="color: green">Table `$tableName` Created</p>';
    }
TEXT;
        }


        $build .= <<<FOOT

    print '<br><br><h3>Rocking! CarbonPHP setup and/or rebuild is complete.</h3>';

} catch (PDOException \$e) {

    print 'Oh no, we failed to insert our databases!! Goto CarbonPHP.com for support and show the following code!<b>' . PHP_EOL;
    print \$e->getMessage() . PHP_EOL;

}
FOOT;

        if (!is_dir(CarbonPHP::$app_root . 'config') && !mkdir($concurrentDirectory = CarbonPHP::$app_root . 'config') && !is_dir($concurrentDirectory)) {
            print 'failed to create directory' . PHP_EOL . "\t" . CarbonPHP::$app_root . 'config';
            return;
        }


        if (!file_put_contents(CarbonPHP::$app_root . 'config' . DS . 'buildDatabase.php', $build)) {
            print 'failed storing database build to file';
            return;
        }

        print "\t" . 'Successfully created/updated database build "' . CarbonPHP::$app_root . 'config' . DS . 'buildDatabase.php' . '"'
            . PHP_EOL . PHP_EOL;
    }
}